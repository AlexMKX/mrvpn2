---
# MRVPN2 VPN Infrastructure Deployment Playbook
# Deploy Firezone VPN infrastructure
# Run this playbook to deploy the main VPN components

- name: Deploy MRVPN2 VPN Infrastructure
  hosts: "{{ lookup('env', 'VPN_MAIN_HOST') | default('vpn-main', true) }}"
  become: true
  gather_facts: true
  any_errors_fatal: true
  serial: 1

  vars_files:
    - deployment-config.yml
    - mrvpn_config.yml

  vars:
    playbook_dir: "{{ ansible_env.PWD | default(ansible_env.PWD) | default('.') }}"
    templates_dir: "{{ playbook_dir }}/templates"

  pre_tasks:
    - name: Verify SSH connection before starting
      wait_for_connection:
        timeout: 30
      delegate_to: localhost

    - name: Validate deployment configuration
      assert:
        that:
          - deployment_config is defined
          - mrvpn_config is defined
        fail_msg: "Missing required configuration files"

    - name: Debug deployment configuration
      debug:
        msg: |
          Deployment config:
            firezone.deploy: {{ deployment_config.services.firezone.deploy }}
            wireguard.deploy: {{ deployment_config.services.wireguard.deploy }}
            mrvpn.deploy: {{ deployment_config.services.mrvpn.deploy }}
          MRVPN config entrypoint: {{ mrvpn_config.entrypoint }}

    - name: Set playbook directory
      set_fact:
        playbook_dir: "{{ ansible_env.PWD | default('.') }}"

    - name: Create MRVPN base directory
      file:
        path: "{{ mrvpn_config.mrvpn_base_dir }}"
        state: directory
        mode: '0755'

    - name: Check if Docker is available
      command: docker --version
      register: docker_check
      ignore_errors: yes
      changed_when: false

    - name: Debug Docker check result
      debug:
        msg: "Docker check result: rc={{ docker_check.rc }}, stdout={{ docker_check.stdout | default('') }}, stderr={{ docker_check.stderr | default('') }}"

    - name: Verify Docker is working after installation
      command: docker ps
      register: docker_ps_check
      ignore_errors: yes
      changed_when: false
      when: docker_check.rc == 0

    - name: Install Docker if missing
      block:
        - name: Clean up conflicting Docker keys and repositories
          shell: |
            # Remove conflicting keys
            rm -f /usr/share/keyrings/docker.asc
            rm -f /usr/share/keyrings/docker-archive-keyring.gpg
            rm -f /etc/apt/keyrings/docker.asc
            rm -f /etc/apt/trusted.gpg.d/docker.asc

            # Remove conflicting sources
            rm -f /etc/apt/sources.list.d/docker.list
            rm -f /etc/apt/sources.list.d/download_docker_com_linux_ubuntu.list

            # Clean apt cache
            apt-get clean
            rm -rf /var/lib/apt/lists/*
            mkdir -p /var/lib/apt/lists/partial
            apt-get update
          when: ansible_os_family == 'Debian'

        - name: Install Docker dependencies
          package:
            name:
              - apt-transport-https
              - ca-certificates
              - curl
              - gnupg
              - lsb-release
              - software-properties-common
            state: present
          when: ansible_os_family == 'Debian'

        - name: Add Docker GPG key
          apt_key:
            url: https://download.docker.com/linux/ubuntu/gpg
            state: present
          when: ansible_os_family == 'Debian'

        - name: Add Docker repository
          apt_repository:
            repo: "deb [arch={{ ansible_architecture }}] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
            state: present
          when: ansible_os_family == 'Debian'

        - name: Install Docker
          package:
            name:
              - docker.io
              - docker-compose-v2
            state: present
          when: ansible_os_family == 'Debian'

        - name: Install Docker Compose
          get_url:
            url: https://github.com/docker/compose/releases/download/v2.33.1/docker-compose-linux-x86_64
            dest: /usr/local/bin/docker-compose
            mode: '0755'

        - name: Verify Docker installation
          command: docker --version
          register: docker_verify
          failed_when: docker_verify.rc != 0
          when: ansible_os_family == 'Debian'

        - name: Start and enable Docker service
          systemd:
            name: docker
            state: started
            enabled: yes
            daemon_reload: yes
      when: docker_check.rc != 0

    - name: Remove incorrect WireGuard port rules (TCP 51820)
      ufw:
        rule: deny
        port: "51820"
        proto: tcp
        delete: yes
      ignore_errors: yes

    - name: Configure UFW firewall TCP rules
      ufw:
        rule: allow
        port: "{{ item }}"
        proto: tcp
      loop:
        - "22"    # SSH
        - "443"   # HTTPS
        - "80"    # HTTP (for redirects)

    - name: Configure WireGuard UFW rule (UDP 51620)
      ufw:
        rule: allow
        port: "51620"
        proto: udp

    - name: Configure Proxmox internal network access from VPN
      ufw:
        rule: allow
        from: "10.0.100.0/24"  # VPN clients
        to: "192.168.100.0/24"  # Proxmox internal network
        proto: tcp
        comment: "Allow VPN clients to access Proxmox internal network"

    - name: Enable UFW firewall
      ufw:
        state: enabled
        policy: deny


  handlers:
    - name: reload systemd
      systemd:
        daemon_reload: yes

    - name: Check Docker disk space
      shell: df -h /var/lib/docker | tail -1
      register: docker_disk_check
      ignore_errors: yes

    - name: Debug Docker disk space
      debug:
        msg: "Docker disk space: {{ docker_disk_check.stdout | default('N/A') }}"

    - name: Clean Docker temporary files
      shell: |
        # Clean Docker tmp directory
        rm -rf /var/lib/docker/tmp/*
        # Clean Docker system
        docker system prune -f || true
        # Clean dangling images
        docker image prune -f || true
      ignore_errors: yes
      when: deployment_config.services.firezone.deploy

    - name: Check Docker daemon status
      systemd:
        name: docker
        state: restarted
      ignore_errors: yes
      when: deployment_config.services.firezone.deploy

  roles:
    - role: firezone
      vars:
        fz_config: "{{ mrvpn_config.firezone }}"
        fz_firezone_dir: "{{ mrvpn_config.mrvpn_base_dir }}/firezone"

    - role: mrvpn2
      vars:
        mrvpn_root: "{{ mrvpn_config.mrvpn_base_dir }}"
        entrypoint: "{{ mrvpn_config.entrypoint }}"
        mrvpn_tunnels: "{{ mrvpn_config.tunnels }}"
        mrvpn_routing: "{{ mrvpn_config.routing }}"
        mrvpn_services: "{{ mrvpn_config.services }}"
        mrvpn_firezone: "{{ mrvpn_config.firezone }}"

  post_tasks:
    - name: Create systemd service for Firezone
      template:
        src: "roles/firezone/templates/firezone.service.j2"
        dest: /etc/systemd/system/firezone.service
        mode: '0644'
      notify: reload systemd
      when: deployment_config.services.firezone.deploy

    - name: Enable and start Firezone service
      systemd:
        name: firezone
        enabled: yes
        state: started
        daemon_reload: yes
      when: deployment_config.services.firezone.deploy

    - name: Display deployment summary
      debug:
        msg: |
          MRVPN2 MVP Deployment Complete!

          Services deployed:
          - Firezone: {{ deployment_config.services.firezone.deploy | ternary('OK', 'SKIP') }}
          - WireGuard: {{ deployment_config.services.wireguard.deploy | ternary('OK', 'SKIP') }}

          Host status:
          - Main server ({{ inventory_hostname }}): Docker {{ 'OK' if docker_check.rc == 0 else 'FAIL' }}
          - Services on this host:
            - Firezone: {{ 'DEPLOYED' if deployment_config.services.firezone.deploy else 'SKIP' }}
            - WireGuard: {{ 'DEPLOYED' if deployment_config.services.wireguard.deploy else 'SKIP' }}
            - MRVPN: {{ 'DEPLOYED' if deployment_config.services.mrvpn.deploy else 'SKIP' }}

          Next steps:
          1. Access Firezone admin panel at {{ mrvpn_config.firezone.fz_server_url }}
          2. Configure OIDC providers (Google/Yandex/Zitadel)
          3. Create VPN users and policies
          4. Create test users and devices through the web interface

    - name: Display final status
      debug:
        msg: "Deployment process finished. Check PLAY RECAP above for final results."
