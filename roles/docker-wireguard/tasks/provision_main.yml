- block:
    - set_fact:
        wg_inventory_host: "{{inventory_hostname}}"
      when: wg_inventory_host is not defined


    - name: "Provision Mikrotik {{wg_inventory_host}}"
      block:

        - include_tasks: mikrotik/main.yml
          vars:
            wg_interface: "{{wg_tunnel_result[wg_tunnel_name].hosts[wg_inventory_host]}}"
      module_defaults:
        group/community.routeros.api:
          hostname: "{{ hostvars[wg_inventory_host].ansible_host }}"
          password: "{{ hostvars[wg_inventory_host].ansible_ssh_pass }}"
          username: "{{ hostvars[wg_inventory_host].ansible_ssh_user }}"
          tls: false
          validate_certs: false
          validate_cert_hostname: false
      delegate_to: localhost
      when:
        - hostvars[wg_inventory_host].ansible_network_os is defined and hostvars[wg_inventory_host].ansible_network_os == 'community.routeros.routeros'
    - name: "Provision linux {{wg_inventory_host}}"
      block:
        - debug:
            msg: "provision linux {{wg_inventory_host}} with {{wg_tunnel_name}}"

        - set_fact:
            wg_tunnel_result: "{{ wg_tunnel_result | combine({wg_tunnel_name: {'hosts': {wg_inventory_host: {'compose_file': wg_compose_file} } } }, recursive=true) }}"
        - include_tasks: docker/main.yml
          vars:
            wg_interface: "{{wg_tunnel_result[wg_tunnel_name].hosts[wg_inventory_host]}}"

      delegate_to: "{{wg_inventory_host}}"

      when:
        - hostvars[wg_inventory_host].ansible_network_os is not defined

    - set_fact:
        wg_interface: null

